// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by:
//     public/app/plugins/gen.go
// Using jennies:
//     PluginSchemaRegistryJenny
//
// Run 'make gen-cue' from repository root to regenerate.

import (
	"github.com/grafana/kindsys"
	"github.com/grafana/grafana/packages/grafana-schema/src/common"
)

kindsys.Composable & kindsys.Composable & {
	maturity:        "experimental"
	name:            "Prometheus"+"DataQuery" & "Prometheus"+"DataQuery"
	schemaInterface: "DataQuery" & "DataQuery"
	lineage: {
		seqs: [{
			schemas: [{
				common.DataQuery

				// The actual expression/query that will be evaluated by Prometheus
				expr: string
				// Returns only the latest value that Prometheus has scraped for the requested time series
				instant?: bool
				// Returns a Range vector, comprised of a set of time series containing a range of data points over time for each time series
				range?: bool
				// Execute an additional query to identify interesting raw samples relevant for the given expr
				exemplar?: bool
				// Specifies which editor is being used to prepare the query. It can be "code" or "builder"
				editorMode?: #QueryEditorMode
				// Query format to determine how to display data points in panel. It can be "time_series", "table", "heatmap"
				format?:          #PromQueryFormat
				#QueryEditorMode: "code" | "builder"                  @cuetsy(kind="enum")
				#PromQueryFormat: "time_series" | "table" | "heatmap" @cuetsy(kind="type")
			}]
		}]
		name: "Prometheus"+"DataQuery" & "Prometheus"+"DataQuery"
	}
}
